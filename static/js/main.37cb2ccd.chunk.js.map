{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","id","title","type","classNames","onClick","event","preventDefault","handleSelectPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","statusText","json","client","NewCommentForm","selectedPostId","comments","setComments","useState","name","setName","email","setEmail","setBody","toShowErrors","setToShowErrors","IsLoading","setIsLoading","onSubmit","postId","newComment","finally","onReset","htmlFor","placeholder","value","onChange","target","PostDetails","errorMsg","setErrorMsg","toShowForm","setToShowForm","useEffect","fetchComments","catch","userId","length","comment","href","filter","c","handleDeleteComment","UserSelector","users","selectedUser","setSelectedUser","open","setOpen","ref","useRef","document","addEventListener","current","contains","role","user","handleUserChoose","App","setUsers","setPosts","postsIsLoading","setPostsIsLoading","fetchUsers","fetchPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.37cb2ccd.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handleSelectPost = (\n    event: React.MouseEvent<HTMLButtonElement>, post: Post,\n  ) => {\n    event.preventDefault();\n\n    if (selectedPost && selectedPost.id === post.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': !selectedPost || selectedPost?.id !== post.id,\n                  })}\n                  onClick={(event) => handleSelectPost(event, post)}\n                >\n                  {selectedPost && selectedPost.id === post.id\n                    ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPostId: number | undefined;\n  comments: Comment[] | null;\n  setComments: (comments: Comment[]) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  comments,\n  setComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [toShowErrors, setToShowErrors] = useState(false);\n  const [IsLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name || !email || !body) {\n      setToShowErrors(true);\n\n      return;\n    }\n\n    setIsLoading(true);\n\n    client.post<Comment>('/comments', {\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    })\n      .then((newComment) => {\n        if (!comments) {\n          return;\n        }\n\n        setComments([...comments, newComment]);\n      })\n      .finally(() => setIsLoading(false));\n\n    setToShowErrors(false);\n    setBody('');\n  };\n\n  const handleClear = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setName('');\n    setEmail('');\n    setBody('');\n    setToShowErrors(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleClear}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': toShowErrors && !name,\n            })}\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {toShowErrors && !name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {toShowErrors && !name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': toShowErrors && !email,\n            })}\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {toShowErrors && !email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {toShowErrors && !email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': toShowErrors && !body,\n            })}\n            value={body}\n            onChange={(event) => setBody(event.target.value)}\n          />\n        </div>\n\n        {toShowErrors && !body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': IsLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n}) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [IsLoading, setIsLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [toShowForm, setToShowForm] = useState(false);\n\n  useEffect(() => {\n    if (!post) {\n      return;\n    }\n\n    setToShowForm(false);\n    setIsLoading(true);\n\n    client.get<Comment[]>(`/comments?postId=${post.id}`)\n      .then((fetchComments) => setComments(fetchComments))\n      .catch(() => setErrorMsg('Something went wrong!'))\n      .finally(() => setIsLoading(false));\n  }, [post?.id, post?.userId]);\n\n  const handleDeleteComment = (comment: Comment) => {\n    if (!comments) {\n      return;\n    }\n\n    setComments(comments.filter((c) => c.id !== comment.id));\n\n    client.delete(`/comments/${comment.id}`);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {IsLoading && (<Loader />)}\n\n          {errorMsg && !IsLoading && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments?.length === 0 && !IsLoading && !errorMsg && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments && comments?.length > 0 && !IsLoading && !errorMsg && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map((comment) => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!toShowForm && !IsLoading && !errorMsg && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setToShowForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {toShowForm && (\n          <NewCommentForm\n            selectedPostId={post?.id}\n            comments={comments}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  setSelectedUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [open, setOpen] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  const handleUserChoose = (\n    event: React.MouseEvent<HTMLAnchorElement>, user: User,\n  ) => {\n    event.preventDefault();\n\n    setSelectedUser(user);\n    setOpen(false);\n  };\n\n  document.addEventListener('click', (event) => {\n    const target = event.target as HTMLElement;\n\n    if (!ref.current?.contains(target)) {\n      setOpen(false);\n    }\n  });\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': open,\n      })}\n      ref={ref}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setOpen(!open)}\n        >\n          <span>\n            {selectedUser?.name ?? 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onClick={(event) => handleUserChoose(event, user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n// import { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postsIsLoading, setPostsIsLoading] = useState(true);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then((fetchUsers) => setUsers(fetchUsers))\n      .catch(() => setErrorMsg('Something went wrong!'));\n  }, []);\n\n  useEffect(() => {\n    if (!selectedUser) {\n      return;\n    }\n\n    setSelectedPost(null);\n\n    setPostsIsLoading(true);\n\n    client.get<Post[]>(`/posts?userId=${selectedUser?.id}`)\n      .then((fetchPosts) => setPosts(fetchPosts))\n      .catch(() => setErrorMsg('Something went wrong!'))\n      .finally(() => setPostsIsLoading(false));\n  }, [selectedUser?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {postsIsLoading && selectedUser && (\n                  <Loader />\n                )}\n\n                {!postsIsLoading && errorMsg && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMsg}\n                  </div>\n                )}\n\n                {posts.length === 0 && !postsIsLoading\n                  && !errorMsg && selectedUser && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && !postsIsLoading && !errorMsg && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': !!selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}